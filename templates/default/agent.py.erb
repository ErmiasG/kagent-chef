#!/usr/bin/env python

'''
Created on 6 October 2013

@author: Hamidreza Afzali <afzali@kth.se>
@author: Jim Dowling <jdowling@kth.se>

Install:
 requests:    easy_install requests
 bottle:      easy_install bottle
 Cherrypy:    easy_install cherrypy
 Netifaces:   easy_install netifaces
 IPy:         easy_install ipy
 pyOpenSSL:   apt-get install python-openssl 
 MySQLdb:     apt-get install python-mysqldb
 pexpect:     apt-get install python-pexpect
'''

import time
from time import sleep
from datetime import datetime
import multiprocessing
import thread
from threading import Lock
import threading
import subprocess
from subprocess import Popen
import os
import sys
import ConfigParser
import requests
import logging.handlers
import json 
from OpenSSL import crypto
import socket
from os.path import exists, join
import MySQLdb
from bottle import Bottle, run, get, post, request, HTTPResponse, server_names, ServerAdapter
import netifaces 
from IPy import IP
import pexpect
import re

global mysql_process
mysql_process = None
var="~#@#@!#@!#!@#@!#"

config_mutex = Lock()
tf_mutex = Lock()

HTTP_OK = 200

BIN_DIR = "<%= node[:kagent][:base_dir] %>/bin"
CONFIG_FILE = "<%= node[:kagent][:base_dir] %>/config.ini"
SERVICES_FILE = "<%= node[:kagent][:base_dir] %>/services"
TF_SERVICES_FILE = "<%= node[:kagent][:base_dir] %>/tf_services"
LOG_FILE = "<%= node[:kagent][:base_dir] %>/agent.log"

CERT_FILE = "<%= node[:kagent][:certs_dir] %>/pub.pem"
CA_FILE = "<%= node[:kagent][:certs_dir] %>/ca_pub.pem"
KEY_FILE = "<%= node[:kagent][:certs_dir] %>/priv.key"
SERVER_KEYSTORE = "<%= node.kagent.keystore_dir %>/node_server_keystore.jks"
SERVER_TRUSTSTORE = "<%= node.kagent.keystore_dir %>/node_server_truststore.jks"
CLIENT_TRUSTSTORE = "<%= node.kagent.keystore_dir %>/node_client_truststore.jks"

global states
states = {}

# tensorflow resources: gpu, cpus
global tfstates
tfstates = {}


cores = multiprocessing.cpu_count()

# reading config
try:
    config = ConfigParser.ConfigParser()
    config.read(CONFIG_FILE)
    server_url = config.get('server', 'url')
    login_url = server_url + config.get('server', 'path-login')
    register_url = server_url + config.get('server', 'path-register')
    heartbeat_url = server_url + config.get('server', 'path-heartbeat')
    alert_url = server_url + config.get('server', 'path-alert')
            
    server_username = config.get('server', 'username')
    server_password = config.get('server', 'password')
    
    logging_level = config.get('agent', 'logging-level').upper()
    max_log_size = config.getint('agent', 'max-log-size')    
    user = config.get('agent', 'username')
    password = config.get('agent', 'password')          
    agent_pidfile = config.get('agent', 'pid-file')
    agent_restport = config.getint('agent', 'restport')
    heartbeat_interval = config.getfloat('agent', 'heartbeat-interval')
    watch_interval = config.getfloat('agent', 'watch-interval')
    mysql_socket = config.get('agent', 'mysql-socket')          
    network_interface = config.get('agent', 'network-interface')          
    group_name = config.get('agent', 'group-name')          

    group_name = config.get('agent', 'group-name')

# TODO find public/private IP addresses 
    public_ip = None
    private_ip = None 
    eth0_ip = netifaces.ifaddresses(network_interface)[netifaces.AF_INET][0]['addr'] 
    if (IP(eth0_ip).iptype() == "PUBLIC"):
        public_ip = eth0_ip
    else:
        private_ip = eth0_ip
    
    if (config.has_option("agent", "hostname")):
        hostname = config.get("agent", "hostname")
    else:
        hostname = socket.gethostbyaddr(eth0_ip)[0]
        
    if (config.has_option("agent", "host-id")):
        host_id = config.get("agent", "host-id")
    else:
        host_id = hostname

    
except Exception, e:
    print "Exception while reading {0}: {1}".format(CONFIG_FILE, e)
    sys.exit(1)

# logging
try:
    os.remove(LOG_FILE + '.1')
except:
    pass    
with open(LOG_FILE, 'w'):  # clear log file
    pass
logger = logging.getLogger('agent')
logger_formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
logger_file_handler = logging.handlers.RotatingFileHandler(LOG_FILE, "w", maxBytes=max_log_size, backupCount=1)
logger_stream_handler = logging.StreamHandler()
logger_file_handler.setFormatter(logger_formatter)
logger_stream_handler.setFormatter(logger_formatter)
logger.addHandler(logger_file_handler)
logger.addHandler(logger_stream_handler)
logger.setLevel(logging.INFO)

logger.info("Hops-Kagent started.")
logger.info("Heartbeat URL: {0}".format(heartbeat_url))
logger.info("Alert URL: {0}".format(alert_url))
logger.info("Host Id: {0}".format(host_id))
logger.info("Hostname: {0}".format(hostname))
logger.info("Public IP: {0}".format(public_ip))
logger.info("Private IP: {0}".format(private_ip))

verbose=False

# reading services
try:
    services = ConfigParser.ConfigParser()
    services.read(SERVICES_FILE)

    for s in services.sections():
        if services.has_option(s, "role") :        
            states[services.get(s, "role")] = {'status':'Stopped', 'start-time':''}

# TODO - for loop to see if there are running tensorflow  programs. Updates states to reflect situation.
except Exception, e:
    logger.error("Exception while reading {0} file: {1}".format(SERVICES_FILE, e))
    sys.exit(1)     


try:
    resources = ConfigParser.ConfigParser()
    resources.read(TF_SERVICES_FILE)
    for s in services.sections():
        if (services.has_option(s, "resource") and services.has_option(s, "id")):        
            tfstates[services.get(s, "resource")][services.get(s, "id")] = {'status':'free', 'start-time':'', 'proj-user':'','pid-file':'', 'program':'', 'args':''}
except Exception, e:
    logger.error("Exception while reading {0} file: {1}".format(TF_SERVICES_FILE, e))
    sys.exit(1)     


logged_in = False
 
class Util():
    
    def logging_level(self, level):
        return {
                'INFO': logging.INFO,
                'WARN': logging.WARN,
                'WARNING': logging.WARNING,
                'ERROR': logging.ERROR,
                'DEBUG' : logging.DEBUG,
                'CRITICAL': logging.CRITICAL,
                }.get(level, logging.NOTSET)

    @staticmethod
    def tail(file_name, n):
        stdin, stdout = os.popen2("tail -n {0} {1}".format(n, file_name))
        stdin.close()
        lines = stdout.readlines(); 
        stdout.close()
        log = "".join(str(x) for x in lines)
        return log


class Heartbeat():
    daemon_threads = True 
    def __init__(self):
        while True:    
            Heartbeat.send()
            time.sleep(heartbeat_interval) 


    @staticmethod
    def login():
        json_headers = {'User-Agent': 'Agent', 'content-type': 'application/json'}
        form_headers = {'User-Agent': 'Agent', 'content-type': 'application/x-www-form-urlencoded'}
        payload = {}
        global logged_in
        global session
        try:
            session = requests.Session()
            resp = session.post(login_url, data={'email': server_username, 'password': server_password}, headers=form_headers, verify=False)
#            resp = session.put(register_url, data=json.dumps(payload), headers=json_headers, verify=False)
            if not resp.status_code == HTTP_OK:
                logged_in = False
                logger.warn('Could not login agent to Hopsworks (Status code: {0}).'.format(resp.status_code))
            else:
                logger.info('Successful login of agent to Hopsworks (Status code: {0}).'.format(resp.status_code))
                logged_in = True
        except Exception as err:
            logger.warn('Could not login agent to Hopsworks {0}'.format(err))
            logged_in = False

    @staticmethod
    def serviceKey(*keys):
            ob = states
            for key in keys:
                ob = ob[key]
            return ob

    @staticmethod
    def send():
        global logged_in
        global session
        if not logged_in:
           logger.info('Logging in to Hopsworks....')
           Heartbeat.login()
        else:
            try:
                disk_info = DiskInfo() 
                memory_info = MemoryInfo()
                load_info = LoadInfo()
                services_list = Config().read_all_for_heartbeat()
                now = long(time.mktime(datetime.now().timetuple()))                
                headers = {'content-type': 'application/json'}
                payload = {}
                payload["host-id"] = host_id            
                payload["agent-time"] = now
                payload["load1"] = load_info.load1
                payload["load5"] = load_info.load5
                payload["load15"] = load_info.load15
                payload["disk-used"] = disk_info.used
                payload['memory-used'] = memory_info.used - memory_info.cached - memory_info.buffers
                payload["services"] = services_list            
                payload["group-name"] = group_name
                payload["hostname"] = hostname

                if (public_ip != None):
                    payload["public-ip"] = public_ip                      
                else:
                    payload["public-ip"] = ""

                if (private_ip != None):
                    payload["private-ip"] = private_ip 
                else:
                    payload["private-ip"] = ""

                payload["cores"] = cores
                payload["disk-capacity"] = disk_info.capacity    
                payload['memory-capacity'] = memory_info.total                            
                logger.info("Sending heartbeat...")
                resp = session.post(heartbeat_url, data=json.dumps(payload), headers=headers, verify=False)
                if not resp.status_code == HTTP_OK:
                    raise Exception('Heartbeat could not be sent (Status code: {0})'.format(resp.status_code))
                    logged_in = False
            except Exception as err:
                logger.error("{0}. Retrying in {1} seconds...".format(err, heartbeat_interval))
                logged_in = False


class Alert:
    @staticmethod    
    def send(cluster, service, role, time, status):
        global session
        try:
            headers = {'content-type': 'application/json'}
            payload = {}
            payload["Provider"] = "Agent"            
            payload["host-id"] = host_id
            payload["Time"] = time
            payload["Plugin"] = "Monitoring"
            payload["Type"] = "Role"
            payload["TypeInstance"] = "{0}/{1}/{2}".format(cluster, service, role)
            payload["DataSource"] = "Agent"
            payload["CurrentValue"] = status
            if status == True:
                payload["Severity"] = "OK"
                payload["Message"] = "Role is running: {0}/{1}/{2}".format(cluster, service, role)
            else:
                payload["Severity"] = "FAILURE"
                payload["Message"] = "Role is not running: {0}/{1}/{2}".format(cluster, service, role)
            
            logger.info("Sending Alert...")
            auth = (server_username, server_password)
#            session = requests.Session()
            session.post(alert_url, data=json.dumps(payload), headers=headers, verify=False)        
#            requests.post(alert_url, data=json.dumps(payload), headers=headers, auth=auth, verify=False)        
        except:
            logger.error("Cannot access the REST service for alerts. Alert not sent.")

            
class MemoryInfo(object):
    def __init__(self):
        process = subprocess.Popen("free", shell=True, stdout=subprocess.PIPE)
        stdout_list = process.communicate()[0].split('\n')
        for line in stdout_list:
            data = line.split()
            try:
                if data[0] == "Mem:":
                    self.total = int(data[1]) * 1024
                    self.used = int(data[2]) * 1024
                    self.free = int(data[3]) * 1024
                    self.buffers = int(data[5]) * 1024
                    self.cached = int(data[6]) * 1024
                    break
            except IndexError:
                continue


class DiskInfo(object):
    def __init__(self):
        disk = os.statvfs("/")
        self.capacity = disk.f_bsize * disk.f_blocks
        self.used = disk.f_bsize * (disk.f_blocks - disk.f_bavail)


class LoadInfo(object):
    def __init__(self):
        self.load1 = os.getloadavg()[0]
        self.load5 = os.getloadavg()[1]
        self.load15 = os.getloadavg()[2]
        

class ExtProcess():  # external process
        
    @staticmethod        
    def watch(cluster, service, role):
        while True:
            try:
                section = Config().section_name(cluster, service, role)
                if Service().alive(cluster,service,role) == True:
                     if (states[role]['status'] == 'Stopped'):
                       logger.info("Process started: {0}/{1}/{2}".format(cluster, service, role))
                       Service().started(cluster, service, role)
                else:
                    raise Exception("Process is not running for {0}/{1}/{2}".format(cluster, service, role))
            except:  
                logger.info("Proccess.watch: Process is not running: {0}/{1}/{2}".format(cluster, service, role))
                if (states[role]['status'] == 'Started'):
                    logger.info("Process failed: {0}/{1}/{2}".format(cluster, service, role))
                    Service().failed(cluster, service, role)
            sleep(watch_interval)

class Config(): 

    def section_name(self, cluster, service, role=None):
        if role == None:
            return "{0}-{1}".format(cluster, service)
        else:
            return "{0}-{1}-{2}".format(cluster, service, role)   
        
    # select items so that the key does not contain 'file' or 'script'
    def read_all_for_heartbeat(self):
        config_mutex.acquire()       
        services_list = []     
        try:
            for s in services.sections():
                   item = {}
                   item['status'] = Heartbeat.serviceKey(services.get(s, "role"), 'status')
                   services_list.append(item)   
                   for key, val in services.items(s):
                       if (not 'file' in key) and (not 'script' in key) and (not 'command' in key):
                           item[key] = val
                       services_list.append(item)                
        finally:
            config_mutex.release()
        return services_list
        
    def get_section(self, section):
        config_mutex.acquire()
        items = {}
        try:
            for key, val in services.items(section):
                items[key] = val
        finally:
            config_mutex.release()
        return items
    
    def get(self, section, option):
        config_mutex.acquire()
        val = ""
        try:         
            val = services.get(section, option)
        finally:
            config_mutex.release()
        return val                


class TfConfig(): 

    def section_name(self, cluster, resource, id=None):
        if id == None:
            return "{0}-{1}".format(cluster, resource)
        else:
            return "{0}-{1}-{2}".format(cluster, resource, id)   
        
    # select items so that the key does not contain 'file' or 'script'
    def read_all_for_heartbeat(self):
        tf_mutex.acquire()       
        resources_list = []     
        try:
            for s in resources.sections():
                   item = {}
                   item['status'] = Heartbeat.resourceKey(resources.get(s, "id"), 'status')
                   resources_list.append(item)   
                   for key, val in resources.items(s):
                       if (not 'file' in key) and (not 'script' in key) and (not 'command' in key):
                           item[key] = val
                       resources_list.append(item)                
        finally:
            tf_mutex.release()
        return resources_list
        
    def get_section(self, section):
        tf_mutex.acquire()
        items = {}
        try:
            for key, val in resources.items(section):
                items[key] = val
        finally:
            tf_mutex.release()
        return items
    
    def get(self, section, option):
        tf_mutex.acquire()
        val = ""
        try:         
            val = resources.get(section, option)
        finally:
            tf_mutex.release()
        return val                

     
class Service:
    
    # need to be completed. Set the status to Initialize?
    def init(self, cluster, service, role):
        section = Config().section_name(cluster, service, role)
        script = Config().get(section, "init-script")
        try:
            p = Popen(script, shell=True, close_fds=True)
            p.wait()
            returncode = p.returncode
            if not returncode == 0:
                raise Exception("Init script returned a none-zero value")
            return True
        except Exception as err:
            logger.error(err)
            return False

            
    def start(self, cluster, service, role):
        script = BIN_DIR + "/start-service.sh"
        try:
            p = Popen(['sudo',script,role],stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            (output,err)=p.communicate()
            returncode = p.wait()
            logger.info("{0}".format(output))
            if not returncode == 0:
                raise Exception("Start script returned a none-zero value")
            Service().started(cluster, service, role)
            # wait for the alert to get returned to Hopsworks, before returning (as this will cause a correct refresh of the service's status)
            sleep(heartbeat_interval+1)
            return True
        except Exception as err:
            logger.error(err)
            return False
        
    def stop(self, cluster, service, role):
        script = BIN_DIR + "/stop-service.sh"
        try:
            subprocess.check_call(['sudo', script, role], close_fds=True)  # raises exception if not returncode == 0
            now = long(time.mktime(datetime.now().timetuple()))
            states[role] = {'status':'Stopped', 'stop-time':now}
            # wait for the alert to get returned to Hopsworks, before returning (as this will cause a correct refresh of the service's status)
            Service().failed(cluster, service, role)
            sleep(heartbeat_interval+1)
            return True
        except Exception as err:
            logger.error(err)
            return False

    def restart(self, cluster, service, role):
        script = BIN_DIR + "/restart-service.sh"
        try:
            p = Popen(['sudo',script,role], close_fds=True)
            p.wait()
            returncode = p.returncode
            if not returncode == 0:
                raise Exception("Restart script returned a none-zero value")
            Service().started(cluster, service, role)
            # wait for the alert to get returned to Hopsworks, before returning (as this will cause a correct refresh of the service's status)
            sleep(heartbeat_interval)
            return True
        except Exception as err:
            logger.error(err)
            return False

    def alive(self, cluster, service, role):
        script = BIN_DIR + "/status-service.sh"
        try:
            p = Popen(['sudo',script,role], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            if (verbose == True):
                with p.stdout:
                    for line in iter(p.stdout.readline, b''):
                        logger.info("{0}".format(line))
            p.wait()
            if not p.returncode == 0:
                return False
        except Exception as err:
            logger.error(err)
            return False
        return True

    def failed(self, cluster, service, role):
        now = long(time.mktime(datetime.now().timetuple()))
        states[role] = {'status':'Stopped', 'start-time':now}
        Alert.send(cluster, service, role, now, False)

    def started(self, cluster, service, role):
        now = long(time.mktime(datetime.now().timetuple()))
        states[role] = {'status':'Started', 'start-time':now}
        Alert.send(cluster, service, role, now, True)


class MySQLConnector():
    @staticmethod
    def read(database, table):
        try:
            db = MySQLdb.connect(unix_socket=mysql_socket, db=database)
            cur = db.cursor()            
            query = "SELECT * FROM {0}".format(table)
            cur.execute(query)    
            return json.dumps(cur.fetchall())
        except Exception as err:
            logger.error("Could not access {0} table from {1}: {2}".format(table, database, err))
            return json.dumps(["Error", "Error: Could not access {0} table from {1}.".format(table, database)])     
            
    @staticmethod
    def read_ndbinfo(table):
        return MySQLConnector.read("ndbinfo", table)
    
    
class CommandHandler():

    def response(self, code, msg):
        resp = HTTPResponse(status=code, output=msg)
        logger.info("{0}".format(resp))
        return resp
         
    def init(self, cluster, service, role):
        section = Config().section_name(cluster, service, role)
        if not services.has_section(section):
            return CommandHandler().response(400, 'Role not installed.')
        else:
            if Service().init(cluster, service, role) == True:
                return CommandHandler().response(200, 'Role initialized.')
            else:
                return CommandHandler().response(400, 'Error: Cannot initialize the service.')
    
    def start(self, cluster, service, role):
        section = Config().section_name(cluster, service, role)
        if not services.has_section(section):
            return CommandHandler().response(400, 'Role not installed.')
        elif states[role]['status'] == 'Started':
            return CommandHandler().response(400, 'Role already started.')
        else:
            res = Service().start(cluster, service, role)
            if res == False:
                return CommandHandler().response(400, 'Error: Cannot start the service.')
            else:
                return CommandHandler().response(200, "Role started.")

    def stop(self, cluster, service, role):
        section = Config().section_name(cluster, service, role)
        if not services.has_section(section):
            return CommandHandler().response(400, 'Role not installed.')
        elif not states[role]['status'] == 'Started':
            return CommandHandler().response(400, 'Role is not running.')
        else:
            if Service().stop(cluster, service, role) == True:
                return CommandHandler().response(200, 'Role stopped.')
            else:
                return CommandHandler().response(400, 'Error: Cannot stop the service.')

    def restart(self, cluster, service, role):
        section = Config().section_name(cluster, service, role)
        if not services.has_section(section):
            return CommandHandler().response(400, 'Role not installed.')
        else:
            res = Service().restart(cluster, service, role)
            if res == False:
                return CommandHandler().response(400, 'Error: Cannot restart the service.')
            else:
                return CommandHandler().response(200, "Role started.")

    def read_log(self, cluster, service, role, lines):
        try:
            lines = int(lines)
            if role == None:
                section = Config().section_name(cluster, service)
            else:
                section = Config().section_name(cluster, service, role)                
            log_file_name = Config().get(section, "stdout-file")
            log = Util().tail(log_file_name, lines)
            return CommandHandler().response(200, log)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Cannot read file.")

    def read_agent_log(self, lines):
        try:
            log = Util().tail(LOG_FILE, lines)
            return CommandHandler().response(200, log)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Cannot read file.")

    def read_config(self, cluster, service, role):
        try:
            section = Config().section_name(cluster, service, role)
            config_file_name = Config().get(section, "config-file")
            with open(config_file_name) as config_file:
                conf = "".join(str(x) for x in (list(config_file)))
            return CommandHandler().response(200, conf)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Cannot read file.")

    def info(self, cluster, service, role):
        try:
            section = Config().section_name(cluster, service, role)
            resp = json.dumps(Config().get_section(section))
            return CommandHandler().response(200, resp)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Cannot read file.")

    def read_ndbinfo(self, table):
        res = MySQLConnector.read_ndbinfo(table)
        return CommandHandler().response(200, res)
                
    def execute(self, cluster, service, role, command, params):
        try:
            if role == None:
                section = Config().section_name(cluster, service)
            else:    
                section = Config().section_name(cluster, service, role)
            script = Config().get(section, "command-script")
            logger.info("Script name executing is: {0}".format(script))
            env = Config().get(section, "command-env")
            command = env + " " + script + " " + params
            command = re.sub(r'([\"])', r'\\\1', command)
            as_user = Config().get(section, "command-user")
# TODO: could check if as_user == "root" or as_user == "sudo" here...
            if not as_user:
                logger.warn("No user supplied to execute command: {0}".format(command))
                raise Exception("Not allowed execute command as user: {0}".format(as_user))
            if as_user:
                command = "su - " + as_user + " -c \"" + command + "\""
# TODO: shell=True is insecure when using untrusted input
# as an attacker can input "hdfs dfs -ls / ; rm -rf /"
            p = Popen(command , shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            out, err = p.communicate()        
            return CommandHandler().response(200, out)
        
        except Exception as err:
            logger.error(err)
            return CommandHandler().response(400, "Could not execute.")                
                
    def refresh(self):
        Heartbeat.send(False);
        return CommandHandler().response(200, "OK")


class Authentication():
    def check(self):
        result = False
        try:
            inPassword = request.params['password']  
            if (inPassword == password):
                return True
        except Exception:
            result = False

        if result == False:
            logger.info("Authentication failed: Invalid password: {0}".format(password))
        return result
    
    def failed(self):
        return HTTPResponse(status=400, output="Invalid password")


class SSLCherryPy(ServerAdapter):  
    def run(self, handler):  
        from cherrypy import wsgiserver  

        # cherrypy.config.update({
        # 'environment': 'production',
        # 'log.screen': False,
        # 'log.access_file': "<%= node.kagent.base_dir %>/access.log",
        # 'log.error_file': "<%= node.kagent.base_dir %>/error.log",
        # 'server.socket_host': '0.0.0.0',
        # 'server.socket_port': agent_restport,
        # 'tools.caching.on': False,
        # 'tools.encode.encoding': "utf-8",
        # 'tools.json_in.on': True,
        # 'tools.json_in.force': False,
        # })

        server = wsgiserver.CherryPyWSGIServer((self.host, self.port), handler)  
        # Certificate file. If a valid path, SSL will be used. Set to None to disable SSL  
        server.ssl_certificate = CERT_FILE
        server.ssl_private_key = KEY_FILE
        # server.ssl_certificate_chain = 'ssl/bundle.crt'
        try:  
            server.start()  
        finally:  
            server.stop()

if __name__ == '__main__':
    
    if len(sys.argv) > 1:
        if (sys.argv[1] == "-v" or sys.argv[1] == "-verbose" or sys.argv[1] == "--verbose"):
            verbose=True
        else:
            print "usage: <prog> [-v|-verbose]"
            sys.exit()

    agent_pid = str(os.getpid())
    file(agent_pidfile, 'w').write(agent_pid)
    logger.info("Hops Kagent PID: {0}".format(agent_pid))
    logger.setLevel(Util().logging_level(logging_level))

    # Heartbeat, process watch (alerts) and REST API are available after the agent registers successfully 
#    thread.start_new_thread(Heartbeat, ()) 
    hb_thread = threading.Thread(target=Heartbeat, args=())
    hb_thread.setDaemon(True)
    hb_thread.start()

    for s in services.sections():
        cluster = Config().get(s, "cluster")
        service = Config().get(s, "service")       
        if services.has_option(s, "role"):
            role = Config().get(s, "role")             
#            thread.start_new_thread(ExtProcess.watch, (cluster, service, role))
            my_thread = threading.Thread(target=ExtProcess.watch, args=(cluster, service, role))
            my_thread.setDaemon(True)
            my_thread.start()
        else:
            logger.info("Not watching {0}/{1}".format(cluster, service))        
#
# The REST code uses a CherryPy webserver, but Bottle for the REST endpoints
# WSGI server for SSL
# For a a tutorial on the REST code below, see http://bottlepy.org/docs/dev/tutorial.html

    server_names['sslcherrypy'] = SSLCherryPy  
    app = Bottle()
    @get('/ping')
    def ping():
        logger.info('Incoming REST Request:  GET /ping')       
        return "Hops-Agent: Pong"
        
    @get('/do/<cluster>/<service>/<role>/<command>')
    def do(cluster, service, role, command):
        logger.info('Incoming REST Request:  GET /do/{0}/{1}/{2}/{3}'.format(cluster, service, role, command))
        if not Authentication().check():
            return Authentication().failed()
        section = Config().section_name(cluster, service, role)
        logger.info("Section is {0}".format(section))
        if not services.has_section(section):
            logger.error("Couldn't find command {0} in {1}/{2} in section {3}".format(command, service, role, section))
            return HTTPResponse(status=400, output='Invalid command.')            

        serviceInServicesFile = Config().get(section, "service")
        roleInServicesFile = Config().get(section, "role")
        commandInServicesFile = Config().get(section, "{0}-script".format(command))

        if (not service == serviceInServicesFile) or (not role == roleInServicesFile) or (not commandInServicesFile):
            logger.error("Couldn't find command {0} in {1}/{2}".format(command, service, role))
            return HTTPResponse(status=400, output='Invalid command.')            
        
        if command == "start":
            return CommandHandler().start(cluster, service, role);
        elif command == "stop":
            return CommandHandler().stop(cluster, service, role);                
        elif command == "init":
            return CommandHandler().init(cluster, service, role); 
        else:
            return HTTPResponse(status=400, output='Invalid command.')        

    @get('/restartRole/<cluster>/<service>/<role>')
    def restartRole(cluster, service, role):
        logger.info('Incoming REST Request:  GET /restartRole/{0}/{1}'.format(cluster, service, role))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, service, role)):
            return HTTPResponse(status=400, output='Cluster/Service/Role not available.')

        return CommandHandler().restart(cluster, service, role);

    @get('/startRole/<cluster>/<service>/<role>')
    def startRole(cluster, service, role):
        logger.info('Incoming REST Request:  GET /startRole/{0}/{1}'.format(cluster, service, role))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, service, role)):
            return HTTPResponse(status=400, output='Cluster/Service/Role not available.')

        return CommandHandler().start(cluster, service, role);

    @get('/stopRole/<cluster>/<service>/<role>')
    def stopRole(cluster, service, role):
        logger.info('Incoming REST Request:  GET /stopRole/{0}/{1}/{2}'.format(cluster, service, role))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, service, role)):
            return HTTPResponse(status=400, output='Cluster/Service/Role not available.')

        return CommandHandler().stop(cluster, service, role);

    @get('/log/<cluster>/<service>/<role>/<lines>')
    def log(cluster, service, role, lines):
        logger.info('Incoming REST Request:  GET /log/{0}/{1}/{2}'.format(cluster, service, role, lines))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, service, role)):
            return HTTPResponse(status=400, output='Cluster/Service/Role not available.')

        return CommandHandler().read_log(cluster, service, role, lines);


    @get('/log/<cluster>/<service>/<lines>')
    def log(cluster, service, lines):
        logger.info('Incoming REST Request:  GET /log/{0}/{1}'.format(cluster, service))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, service)):
            return HTTPResponse(status=400, output='Cluster/Service not available.')

        return CommandHandler().read_log(cluster, service, None, lines);


    @get('/agentlog/<lines:int>')
    def agentlog(lines):
        logger.info('Incoming REST Request:  GET /agentlog/{0}'.format(lines))
        if not Authentication().check():
            return Authentication().failed()
                                    
        return CommandHandler().read_agent_log(lines);

    @get('/config/<cluster>/<service>/<role>')
    def config(cluster, service, role):
        logger.info('Incoming REST Request:  GET /log/{0}/{1}/{2}'.format(cluster, service, role))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, service, role)):
            return HTTPResponse(status=400, output='Cluster/Service/Role not available.')
            
        return CommandHandler().read_config(cluster, service, role);

    @get('/info/<cluster>/<service>/<role>')
    def info(cluster, service, role):
        logger.info('Incoming REST Request:  GET /status/{0}/{1}'.format(cluster, service, role))
        if not Authentication().check():
            return Authentication().failed()
        
        if not services.has_section(Config().section_name(cluster, service, role)):
            return HTTPResponse(status=400, output='Cluster/Service/Role not available.')
            
        return CommandHandler().info(cluster, service, role);

    @get('/refresh')  # request heartbeat
    def refresh():
        logger.info('Incoming REST Request:  GET /refresh')
        if not Authentication().check():
            return Authentication().failed()
             
        return CommandHandler().refresh();

    @get('/mysql/ndbinfo/<table>')
    def mysql_read(table):
        logger.info('Incoming REST Request:  GET /mysql/ndbinfo/{0}'.format(table))
        if not Authentication().check():
            return Authentication().failed()
            
        return CommandHandler().read_ndbinfo(table)
    
    @post('/execute/<state>/<cluster>/<service>/<role>/<command>')
    def execute_hdfs(state, cluster, service, role, command):
        logger.info('Incoming REST Request:  POST /execute/{0}/{1}/{2}/{3}/{4}'.format(state, cluster, service, role, command))
        if not Authentication().check():
            return Authentication().failed()            
        if request.body.readlines():
            params =  request.body.readlines()[0]
        else:
            params = ""                        
        if state == "run" :
            if role == "-":
                return CommandHandler().execute(cluster, service, None, command, params);
            else:       
                return CommandHandler().execute(cluster, service, role, command, params);
        return CommandHandler().response(404, "Error")  
                
    '''
    Tensorflow REST API.
    Operations to allocate/free resources for Tensorflow programs.
    Start/stop Tensorflow programs.
    Serve/stop-serving Tensorflow models.
    '''

    @post('/tf/alloc')
    def tf_alloc():
     # Extract the projectname, username
     # Extract the resource request (cpu or gpu). How many?
     # Check tfstate to see if there is a free cpu or gpu
     # Update tfstate, then write it to the file. Then return allocated response
        if (password != request.json['password']):
            return Authentication().failed()

        proj_user = request.json['proj-user']
        resource = request.json['resource']
        if (resource != "cpu" or resource != "gpu"):
            return HTTPResponse(status=400, output='Invalid resource type requested. Valid types: cpu, gpu.')
        resource_id = int(request.json['id'])
        if (tfstates[resource][resource_id]['status'] != 'free'):
            return HTTPResponse(status=400, output='Resource is busy.')
        now = long(time.mktime(datetime.now().timetuple()))
        tfstates[resource][resource_id]['status'] = 'busy'
        tfstates[resource][resource_id]['start-time'] = now
        tfstates[resource][resource_id]['proj-user'] = proj_user
        # Write to the resources file that i have updated the resource
        return HTTPResponse(status=400, output='Invalid command.')        

    @post('/tf/free')
    def tf_free():
        if (password != request.json['password']):
            return Authentication().failed()
        proj_user = request.json['proj-user']
        resource = request.json['resource']
        if (resource != "cpu" or resource != "gpu"):
            return HTTPResponse(status=400, output='Invalid resource type requested. Valid types: cpu, gpu.')
        resource_id = int(request.json['id'])
        if (tfstates[resource][resource_id]['status'] != 'free'):
            return HTTPResponse(status=400, output='Resource is busy.')
        now = long(time.mktime(datetime.now().timetuple()))
        tfstates[resource][resource_id]['status'] = 'busy'
        tfstates[resource][resource_id]['start-time'] = now
        tfstates[resource][resource_id]['proj-user'] = proj_user

        # Write to the resources file that i have updated the resource
        return HTTPResponse(status=400, output='Invalid command.')        

    @post('/tf/runcpu/<projuser>/<pythonprog>/<args>')
    def tf_run_cpu(projuser, pythonprog, args):
        if (password != request.json['password']):
            return Authentication().failed()
        return HTTPResponse(status=400, output='Invalid command.')        

    @post('/tf/rungpu/<projuser>/<pythonprog>/<args>')
    def tf_run_gpu(projuser, pythonprog, args):
        if (password != request.json['password']):
            return Authentication().failed()
        return HTTPResponse(status=400, output='Invalid command.')        

    @post('/tf/poll/<projuser>')
    def tf_poll(projuser):
        if (password != request.json['password']):
            return Authentication().failed()
        return HTTPResponse(status=400, output='Invalid command.')        

    @post('/tf/uploadserver/<projuser>')
    def tf_start_serving(projuser):
        if (password != request.json['password']):
            return Authentication().failed()
        model = request.json
        try:
#            model_filename = request.POST.get('model')
            for i in request.files.getlist('file'):
                filepath = os.path.join('./models/uploaded',thisuser.data.get('model'))
                fileobj = i.file
                with open(filepath,"wb") as target_file:
                    while True:
                        datachunk = fileobj.read(1024)
                        if not datachunk:
                            break
                    target_file.write(datachunk)

        except:
            print("error: " + sys.exc_info())

        return HTTPResponse(status=400, output='Invalid command.')        

    @post('/tf/startserving/<projuser>/<modelfilename>/<args>')
    def tf_start_serving(projuser,modelfilename,args):
        if (password != request.json['password']):
            return Authentication().failed()
        try:
            rawData = cherrypy.request.body.read(int(cherrypy.request.headers['Content-Length']))
            b = json.loads(rawData)
#            return json.dumps({'x': 4, 'c': b})
#            return {'x': 4, 'c': b}
            model_filename = request.POST.get('model')
            args = request.POST.get('args')
#            response.content_type = 'application/json'
            return json.dumps(tfcase.search(searchterm,images_only))
        except:
            print("error: " + sys.exc_info())
        return HTTPResponse(status=400, output='Invalid command.')        


    @get('/tf/stopserving')
    def tf_stop_serving():
        if (password != request.json['password']):
            return Authentication().failed()
        proj_user = request.json['projuser'];
        model_name = request.json['model-name'];

        return HTTPResponse(status=400, output='Invalid command.')        



    logger.info("RESTful service started.")
    run(host='0.0.0.0', port=agent_restport, server='sslcherrypy')

